function BER = ber_mimo_4x4(frmLen, numPackets, EbN0, N, M, P)
% ber_mimo_stbc Tính BER cho hệ thống MIMO STBC Tx=N, Rx=M, điều chế P-PSK
%   BER = ber_mimo_stbc(frmLen, numPackets, EbN0, N, M, P)
%   - frmLen: số symbol mỗi packet
%   - numPackets: số packet chạy Monte Carlo
%   - EbN0: vector Eb/N0 (dB)
%   - N: số anten Tx (ví dụ 4)
%   - M: số anten Rx (ví dụ 4)
%   - P: bậc PSK (2=BPSK,4=QPSK,8=8PSK,...)
%
%   Trả về BER: vector cùng kích thước EbN0.

    BER = zeros(size(EbN0));

    for idx = 1:length(EbN0)
        errors = zeros(1, numPackets);
        for pkt = 1:numPackets
            % Sinh dữ liệu và điều chế
            data = randi([0 P-1], frmLen, N);
            X    = pskmod(data, P, 0);

            % Tạo khung STBC 4x4 mở rộng
            x1 = X(:,1:4);
            x2 = [-X(:,2),  X(:,1), -X(:,4),  X(:,3)];
            x3 = [-X(:,3),  X(:,4),  X(:,1), -X(:,2)];
            x4 = [-X(:,4), -X(:,3),  X(:,2),  X(:,1)];
            x5 = conj(x1);
            x6 = conj(x2);
            x7 = conj(x3);
            x8 = conj(x4);

            % Sinh kênh Rayleigh (frmLen × N × 4 × M)
            Hr = (randn(frmLen, N, 4, M) + 1i*randn(frmLen, N, 4, M)) / sqrt(2);
            NF = 3;   % Noise figure 3 dB
            % Khởi tạo z1..z4
            z1 = zeros(frmLen,4,M);
            z2 = zeros(frmLen,4,M);
            z3 = zeros(frmLen,4,M);
            z4 = zeros(frmLen,4,M);

            % Nhận và giải STBC cho mỗi anten thu mRx
        Hr = (randn(frmLen, N, 4, M) + 1i*randn(frmLen, N, 4, M))/sqrt(2);
        z1 = zeros(frmLen,4,M);
        z2 = zeros(frmLen,4,M);
        z3 = zeros(frmLen,4,M);
        z4 = zeros(frmLen,4,M);
        for mRx = 1:M
            for n=1:4
                %ma tran phat
                 H = reshape(Hr(:,:,n,mRx), frmLen, N);
                %tin hieu tai anten thu
                r1(:,n)=awgn(sum(H.*x1,2)/sqrt(N),EbN0(idx));
                r2(:,n)=awgn(sum(H.*x2,2)/sqrt(N),EbN0(idx));
                r3(:,n)=awgn(sum(H.*x3,2)/sqrt(N),EbN0(idx));
                r4(:,n)=awgn(sum(H.*x4,2)/sqrt(N),EbN0(idx));
                r5(:,n)=awgn(sum(H.*x5,2)/sqrt(N),EbN0(idx));
                r6(:,n)=awgn(sum(H.*x6,2)/sqrt(N),EbN0(idx));
                r7(:,n)=awgn(sum(H.*x7,2)/sqrt(N),EbN0(idx));
                r8(:,n)=awgn(sum(H.*x8,2)/sqrt(N),EbN0(idx));
                
                z1_1(:,n) = r1(:,n).*conj(H(:,1)) + r2(:,n).*conj(H(:,2)) + r3(:,n).*conj(H(:,3)) + r4(:,n).*conj(H(:,4));
                z1_2(:,n) = conj(r5(:,n)).*H(:,1) + conj(r6(:,n)).*H(:,2) + conj(r7(:,n)).*H(:,3) + conj(r8(:,n)).*H(:,4);
                z1(:,n,mRx) = z1_1(:,n) + z1_2(:,n);
    
                z2_1(:,n) = r1(:,n).*conj(H(:,2)) - r2(:,n).*conj(H(:,1)) - r3(:,n).*conj(H(:,4)) + r4(:,n).*conj(H(:,3));
                z2_2(:,n) = conj(r5(:,n)).*H(:,2) - conj(r6(:,n)).*H(:,1) - conj(r7(:,n)).*H(:,4) + conj(r8(:,n)).*H(:,3);
                 z2(:,n,mRx) = z2_1(:,n) + z2_2(:,n);
    
                z3_1(:,n) = r1(:,n).*conj(H(:,3)) + r2(:,n).*conj(H(:,4)) - r3(:,n).*conj(H(:,1)) - r4(:,n).*conj(H(:,2));
                z3_2(:,n) = conj(r5(:,n)).*H(:,3) + conj(r6(:,n)).*H(:,4) - conj(r7(:,n)).*H(:,1) - conj(r8(:,n)).*H(:,2);
                z3(:,n,mRx) = z3_1(:,n) + z3_2(:,n);
    
                z4_1(:,n) = r1(:,n).*conj(H(:,4)) - r2(:,n).*conj(H(:,3)) + r3(:,n).*conj(H(:,2)) - r4(:,n).*conj(H(:,1));
                z4_2(:,n) = conj(r5(:,n)).*H(:,4) - conj(r6(:,n)).*H(:,3) + conj(r7(:,n)).*H(:,2) - conj(r8(:,n)).*H(:,1);
                z4(:,n,mRx) = z4_1(:,n) + z4_2(:,n);    
                
            end
            end

            % Diversity combining và chuẩn hóa
            r_comb = [ sum(sum(z1,3),2), sum(sum(z2,3),2), ...
                       sum(sum(z3,3),2), sum(sum(z4,3),2) ] / (N*M);

            % Giải điều chế và tính lỗi
            demod = pskdemod(r_comb, P, 0);
            errors(pkt) = biterr(demod, data);
        end

        BER(idx) = sum(errors) / (numPackets * frmLen);
        fprintf('MIMO STBC 4X4 Tx=%d,Rx=%d:Eb/N0=%2.1f dB → BER=%e\n',N,M, EbN0(idx), BER(idx));
    end
end


%Tx = 4, Rx = 1
frmLen     = 130;
numPackets = 4000;
EbN0       = 0:0.2:8;
N = 4; M = 1; P = 4;  % 4×1 QPSK
fprintf('Eb/N0=%2.1f dB → BER=%e\n', EbN0(idx), BER(idx));
%BER41 = ber_mimo_4x4(frmLen, numPackets, EbN0, 4, 1, P);
%BER42 = ber_mimo_4x4(frmLen, numPackets, EbN0, 4, 2, P);
%BER43 = ber_mimo_4x4(frmLen, numPackets, EbN0, 4, 3, P);
BER44 = ber_mimo_4x4(frmLen, numPackets, EbN0, 4, 4, P);
% Vẽ kết quả
h = figure;
%semilogy(EbN0, BER41, 'r*-', 'LineWidth', 1.5, 'DisplayName', 'Tx=4,Rx=1,STBC 4x4');
hold on;
%semilogy(EbN0, BER42, 'bs-', 'LineWidth', 1.5, 'DisplayName', 'Tx=4,Rx=2,STBC 4x4');
hold on;
%semilogy(EbN0, BER43, 'g^-', 'LineWidth', 1.5, 'DisplayName', 'Tx=4,Rx=3,STBC 4x4');
hold on;
semilogy(EbN0, BER44, 'y*-', 'LineWidth', 1, 'DisplayName', 'Tx=4,Rx=4,STBC 4x4');
grid on;
set(gca, 'yscale', 'log', 'xlim', [EbN0(1), EbN0(end)], 'ylim', [1e-9 1e-1]);
xlabel('Eb/N0 (dB)'); ylabel('BER');
title('Hệ thống MIM0 STBC 4x4');
legend('show');
set(h, 'color', [1 1 1]);
set(h, 'NumberTitle', 'off');
set(h, 'renderer', 'zbuffer');